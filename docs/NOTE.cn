判定两端可否通信的规则,越靠前优先级越高:
    0, 两端真实IP相同,提示在同一局域网内,停止处理.
    1, 一端网络类型为Opened/Full Cone NAT,则判定可通信,无须再判断另一端网络类型,类型I.
    2, 一端网络类型为Restricted Firewall/Restricted Cone NAT,则判定可通信,无须再判断另一端网络类型,类型II.
    3, 两端网络类型均为Port Restricted Firewall/Port Restricted Cone NAT,则判定可通信,类型III.
    4, (*这种暂时不单独实现了,归入Symmetric NAT)一端网络类型为Port Restricted Firewall/Port Restricted Cone NAT,另一端网络类型为Symmetric NAT with Localization,可尝试通信,类型IV.
    5, 一端网络类型为Port Restricted Firewall/Port Restricted Cone NAT,另一端网络类型为Symmetric NAT,可尝试通信,类型V.
    6, 其他类型判定不可通信.
    *, 事实上,Restricted Symmetric NAT with Localization也有很强的通信能力,几乎等同于Restricted NAT,但这种网络比较少,暂不单独考虑,与Port Restricted Symmetric NAT with Localization同作为Symmetric NAT with Localization处理.

链路建立步骤:
    1, server获取自身网络类型,如果是Blocked类型则放弃,否则做xmpp listen.
    2, client获取自身网络类型及映射IP:PORT,如果是Blocked类型则放弃,,然后以xmpp方式发送client hello给server.
    3, server创建新工作线程,创建udp socket,获取其映射地址IP:PORT.
    4, server根据两端网络类型,分类处理.
        I,如果server为Opened/Full cone NAT,xmpp通知(server cmd)client连接server的IP:PORT.
          如果client为Opened/Full cone NAT,xmpp通知client准备接受连接.
          注:通知包含一个session key,下同.
        II,如果server为Restricted,向client的IP:PORT发送一个包打洞,然后xmpp通知client连接server的IP:PORT.
           如果client为Restricted,xmpp通知client向server的IP:PORT打洞and then xmpp tell server并准备接受连接.
        III,向client的IP:PORT发送一个包打洞,然后xmpp通知client连接server的IP:PORT.
        *IV,如果server为Port Restricted,xmpp通知client创建新socket,绑定新端口,listen,向server的IP:PORT打洞同时获取新映射地址,然后将新的映射地址xmpp发送到server,server试图连接client的一个port段.
            如果client为Port Restricted,server创建新socket,绑定新端口,listen,向client打洞同时获取新映射地址,然后将新的映射地址xmpp通知client,client试图连接server的一个port段.
        V,如果server为Port Restricted,则向client的port区域PR1打洞,然后xmpp通知client向server的IP:PORT发包并在发送完毕后通过xmpp告诉server,之后server检查udp socket如收到client的udp包则连接建立,否则继续向新区域PR*打洞,重复以上步骤直到遍历完整个client的所有port.
          如果client为Port Restricted,server xmpp通知client开始向server的做区域(PR1)打洞,然后由client打洞,并xmpp通知(Ack)server向client的IP:PORT发包且在发送完毕后通过xmpp告诉(VBSent)client,之后client检查udp socket如收到server的udp包则连接建立,否则继续向新区域PR*打洞,重复以上步骤直到遍历完整个server的所有port.

通信包格式:
    xmpp packet: plain-text
        client hello:
            Hello;NetType;IP:PORT
        server cmd:
            * Impossible to connect.
            Cannot;REASON;SESSID
            * I
            Do;IA;IP:PORT;SESSID
            Do;IB;SESSID
            * II
            Do;IIA;IP:PORT;SESSID
            Do;IIB;IP;PORT;SESSID
            * III
            Do;III;IP:PORT;SESSID
            * V
            Do;VA;IP:PORT;SESSID
            Do;VB;IP:PORT;SESSID
            Done;VBSent;SESSID
        client cmd:
            * Impossible to connect.
            Cannot;REASON;SESSID
            * II
            Ack;IIB;SESSID
            * V
            Ack;VA;SESSID
            Ack;VB;SESSID

    udp packet: plain-text
        * Request
            Hi;SESSID
        * Reply
            Welcome;SESSID

服务端程序结构: 主线程 + 若干工作线程

    主线程:
        处理xmpp消息,创建工作线程,向其传递xmpp消息内容,并回送工作线程响应.

    工作线程:
        处理xmpp消息内容.
        转发udp数据包.
        地址映射维持(双向0长度udp包).

服务器/客户端所有工作都有一个超时,过期复位.
